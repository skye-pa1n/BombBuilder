name: Build Kernel
on:
  workflow_dispatch:
    inputs:
      BRANCH:
        description: Kernel branch
        default: 'endless'
        required: true
      TARGET_DEVICE:
        description: 'Target Device'
        required: true
        default: 'r8q'
        type: choice
        options:
          - r8q
      LTO:
        description: 'Link Time Optimisation'
        required: true
        default: 'thin'
        type: choice
        options:
          - none
          - thin
          - full
      CLANG_EIGHTEEN:
        description: Use clang 18
        type: boolean
      UPLOAD_TO_TG:
        description: Upload to Telegram
        type: boolean
      LLVM:
        description: LLVM=1
        type: boolean
      LLVM_IAS:
        description: LLVM_IAS=1 (LLVM=1 needed!)
        type: boolean
        
jobs:
  build:
    runs-on: ubuntu-latest
    environment: secureEnvironment
    steps:
    - name: Get date
      id: rundate
      run: sudo rm /etc/localtime && sudo ln -s /usr/share/zoneinfo/Asia/Jakarta /etc/localtime && echo "REPO_DATE=`date`" >> $GITHUB_OUTPUT
    - uses: actions/checkout@v4
      with:
        path: kernel_root
        repository: skye-pa1n/not_r8q_ui
        show-progress: false
        fetch-depth: 1
  
    - name: Prepare dependencies
      run: |
        sudo apt update -y
        sudo apt install bc cpio flex bison aptitude git python-is-python3 tar perl wget curl lz4 -y
        sudo aptitude install libssl-dev -y
        
    - name: Fetch toolchains
      run: |
        mkdir toolchains
        cd toolchains
        mkdir clang-18 && cd clang-18
        wget -q -O clang.tar.gz https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r522817.tar.gz
        tar -xf clang.tar.gz && rm clang.tar.gz && cd ..
        git clone --depth=1 https://github.com/rsuntk/toolchains.git -b gcc-10 gcc-10
      working-directory: kernel_root
      
    - name: Build kernel
      id: buildKernel
      run: |
        CLANG_VERSION=18 && echo "CLANG_VERSION=$CLANG_VERSION" >> $GITHUB_ENV
        export PATH=$(pwd)/toolchains/clang-`echo $CLANG_VERSION`/bin:$PATH
        export CROSS_COMPILE=$(pwd)/toolchains/gcc-10/bin/aarch64-buildroot-linux-gnu-
        export CLANG_TRIPLE=aarch64-linux-gnu-
        export KBUILD_BUILD_USER="skye"
        export KBUILD_BUILD_HOST="github-workflows"
        export BUILD_START=`date`
        export SELINUX_STATE="Enforcing"
        export IS_CI=true
        export LTO="${{ github.event.inputs.LTO }}"

        if [[ "${{ github.event.inputs.LLVM }}" = "true" ]]; then
          export LLVM=1
          if [[ "${{ github.event.inputs.LLVM_IAS }}" = "true" ]]; then
            export LLVM_IAS=1
          fi
        fi
        if [[ "${{ github.event.inputs.TARGET_DEVICE }}" = "r8q" ]]; then
          export DEFCONFIG="not_defconfig"
          export DEVICE="G780G"
          export DEVICE_ID="S20 FE"
          export TARGET_PRODUCT=r8q
        fi
        
        bash $(pwd)/bomb.sh kernel --jobs $(nproc --all) `echo $DEFCONFIG`
        
        echo "- KernelSU version: 1.0.3 NeXT"
        
        ## CREATE buildDetails.txt
        printf "Localversion: `./getutsrel`
        Clang version: `clang -v 2>&1 | grep ' version ' | sed 's/[[:space:]]*$//'`
        Build: `echo $BUILD_START`
        Defconfig: `echo $DEFCONFIG`
        KernelSU: `echo $KSU_VERSION`
        LTO: `echo $LTO`
        SELinux: `echo $SELINUX_STATE`
        " >> buildDetails.txt
        
        echo "TITLE=Galaxy `echo $DEVICE_ID` Kernel" >> $GITHUB_ENV
        
        echo ""
        echo "===================================================="
        strings out/arch/arm64/boot/Image | grep "Linux version"
        echo "===================================================="

        mv out/.config out/build_config.txt
        gitsha1=$(git rev-parse --short HEAD)
        buildDetails="`make kernelversion`-`echo $DEVICE`_`echo $gitsha1`-`date +'%Y%m%d%H%M%S'`" && echo "buildDetails=$buildDetails" >> $GITHUB_OUTPUT
      working-directory: kernel_root
      
    - name: Upload config
      uses: actions/upload-artifact@v4
      with:
        name: Config-${{ steps.buildKernel.outputs.buildDetails }}
        path: kernel_root/out/build_config.txt
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Build-${{ steps.buildKernel.outputs.buildDetails }}
        path: |
          kernel_root/out/arch/arm64/boot/*.gz
          kernel_root/out/arch/arm64/boot/dts/mediatek/*.dtb

    - name: Upload AnyKernel3
      uses: actions/upload-artifact@v4
      with:
        name: AnyKernel3-${{ steps.buildKernel.outputs.buildDetails }}
        path: kernel_root/AnyKernel3/*
        compression-level: 9
                
